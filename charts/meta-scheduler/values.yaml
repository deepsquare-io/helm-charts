image:
  repository: ghcr.io/deepsquare-io/meta-scheduler
  # tag defaults to AppVersion
  tag: ''

imagePullPolicy: 'IfNotPresent'

replicas: 3

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1

annotations: {}
labels: {}

config:
  debug: false

  metascheduler:
    smartContract: '0x68A606C58fA06fF6872c80d71A71Ab7506eCa44B'

  notifier:
    urls:
      secretName: ''
      key: NOTIFIER_URLS

  eth:
    privateKeyRef:
      secretName: 'metascheduler-secret'
      key: ETH_PRIVATE_KEY

    endpoint:
      rpc: 'https://testnet.deepsquare.run/rpc'
      ws: 'wss://testnet.deepsquare.run/ws'

  etcd:
    prefix: meta-scheduler/production
    endpoints: 'http://etcd-0:2379,http://etcd-1:2379'
    user: meta-scheduler
    passwordRef:
      secretName: 'metascheduler-secret'
      key: ETCD_PASSWORD

    ca: '' # /path/to/ca.crt

    ## Client to server encryption
    cert: '' # /path/to/tls.crt
    key: '' # /path/to/tls.key

    ## Use HTTP instead of HTTPS
    insecure: false
    ## Do not check TLS certificates
    skipTLS: false

resources:
  {}
  # requests:
  #   cpu: '100m'
  #   memory: '256Mi'
  # limits:
  #   memory: '1Gi'

# Extra volume mounts
volumeMounts:
  []
  # - name: certs
  #   mountPath: /tls

# Extra volumes
volumes:
  []
  # - name: certs
  #   secret:
  #     secretName: cert-secret
  #     defaultMode: 384 # 0600

## Use an alternate scheduler.
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ''

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# How long to wait to stop gracefully
terminationGracePeriod: 10

imagePullSecrets: {}

nodeSelector: {}
tolerations: []

livenessProbe:
  failureThreshold: 5
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 30

readinessProbe:
  failureThreshold: 5
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 30

initContainers: []

service:
  enabled: true
  type: ClusterIP

ingress:
  enabled: false
  ingressClass: ''

  annotations: {}

  hosts:
    []
    # - meta-scheduler.example.com

  path: /

  tls:
    []
    # - secretName: meta-scheduler.example.com-secret
    #   hosts:
    #     - meta-scheduler.example.com

## Extra manifests
extra: []
