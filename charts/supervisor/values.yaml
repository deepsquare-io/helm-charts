image:
  repository: ghcr.io/deepsquare-io/supervisor
  # tag defaults to AppVersion
  tag: ''

imagePullPolicy: 'IfNotPresent'

replicas: 1

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1

annotations: {}
labels: {}

## Use command to passs custom benchmark environment variables
command: []
#  - /app/supervisor
#  - --benchmark.env NCCL_P2P_DISABLE=1 # Disable GPU-to-GPU transport
#  - --benchmark.env NCCL_P2P_LEVEL=PHB # Or, prefer PHB transport over SYS

config:
  ## Public address or address of the reverse proxy.
  ##
  ## This address is used by the SLURM plugins to know where to report job statuses.
  publicAddress: 'supervisor.example.com:443'
  ## Enable gRPC server authentication.
  ##
  ## If you are using a reverse proxy, disable HTTP or use TLS Passthrough.
  tls:
    enable: false
    key: /tls/tls.key
    cert: /tls/tls.crt

  provider:
    ## The provider private key (hexadecimal format)
    ##
    ## This is extremely confidential. DO NOT CHECK ON CVS.
    privateKeyRef:
      secretName: provider-wallet-secret
      key: wallet-private-key

  metascheduler:
    endpoint:
      rpc: 'https://testnet.deepsquare.run/rpc'
      ws: 'wss://testnet.deepsquare.run/ws'

    ## Smart contract 0x address.
    ##
    ## Example: 0x3a97E2ddD148647E60b4b94BdAD56173072Aa925
    smartContract: ''

    ## Prices of your infrastructure
    ##
    ## Divide by 1e18 to get the normalized value.
    prices:
      ## CPU physical threads per min.
      cpuPerMin: '950000000000000000'
      ## GPU per min.
      gpuPerMin: '8500000000000000000'
      ## RAM (MB) per min.
      memPerMin: '80000000000000'

    labels:
      {}
      # os: linux

  sbatchService:
    endpoint: 'sbatch.deepsquare.run:443'
    tls:
      enable: true
      insecure: false
      ca: /etc/ssl/certs/ca-certificates.crt

  slurm:
    ## Which slurm partition to use.
    partition: main
    ## Set the SSH credentials.
    ##
    ## The admin user is either the root user, the SlurmUser (see slurm.conf) or
    ## a SLURM administrator.
    ssh:
      adminUser: slurm
      address: slurm-login:22

      ## The private key used to login and impersonate.
      ##
      ## You should have installed the `provider-ssh-authorized-keys` on the
      ## login nodes as a way to fetch the public key of the supervisor.
      ##
      ## We expect the value of `key` to be a one line base64 encoded value.
      ##
      ## Example:
      ##
      ## stringData:
      ##   ssh-private-key: <base64 encoded value>
      ##
      ## OR:
      ##
      ## data:
      ##   ssh-private-key: <double base64 encoded value>
      privateKeyRef:
        secretName: supervisor-ssh-key-secret
        key: ssh-private-key

    ## Set the paths on the login node.
    ##
    ## To avoid PATH env poisoning, we suggest to set absolute path to the slurm executables.
    paths:
      sbatch: /usr/bin/sbatch
      scancel: /usr/bin/scancel
      squeue: /usr/bin/squeue
      scontrol: /usr/bin/scontrol
      sinfo: /usr/bin/sinfo

  ## Launch a benchmark when booting.
  ##
  ## By launching a benchmark, the results will be registered to the blockchain.
  benchmark:
    disable: true
    runAs: 'root'
    timeLimit: '24h'

    ## Submit the benchmark on unresponsive nodes
    unresponsive: false

    ## Enable benchmark trace (very verbose)
    trace: false

    ## Options for HPL benchmark
    hpl:
      image: 'registry-1.deepsquare.run#library/hpc-benchmarks:23.5'
      singleNode: true

    ## Options for OSU benchmark
    osu:
      image: 'registry-1.deepsquare.run#library/osu-benchmarks:latest'

    ## Options for Speedtest benchmark
    speedtest:
      image: 'registry-1.docker.io#gists/speedtest-cli:1.2.0'

    ## Options for IOR benchmark
    ior:
      image: 'registry-1.deepsquare.run#library/ior-benchmarks:latest'
      singleNode: true

    ## Use UCX transport for benchmarking
    ##
    ## UCX can be used for RDMA and TCP.
    ## If set to false, default to OpenMPI transport, which is "shared memory, self, tcp".
    ucx:
      enable: false
      ## Affinity is the NIC selector for each node.
      ##
      ## Syntax is:
      ##  RDMA: mlx_0:1|mlx_0:1 which means node 1 will use device mlx_0 port 1 and node 2 will use device mlx_0 port 1.
      ##  TCP: eth0|eth0
      ##
      ## See `ucx_info -db`
      affinity: ''
      ## Specify the transport.
      ##
      ## An empty value will set automatically the transport.
      ## Transport may look like: "sm,self,rc" or "sm,self,tcp".
      transport: ''

resources:
  {}
  # requests:
  #   cpu: '100m'
  #   memory: '256Mi'
  # limits:
  #   memory: '1Gi'

# Extra env
env:
  []
  # - name: KEY
  #   value: VALUE

# Extra volume mounts
volumeMounts:
  []
  # - name: certs
  #   mountPath: /tls
  # - name: oracletls
  #   mountPath: /oracletls

# Extra volumes
volumes:
  []
  # - name: certs
  #   secret:
  #     secretName: cert-secret
  #     defaultMode: 384 # 0600
  # - name: oracletls
  #   secret:
  #     secretName: oracletls

## Use an alternate scheduler.
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ''

podSecurityContext:
  runAsUser: 1000

securityContext:
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# How long to wait to stop gracefully
terminationGracePeriod: 10

imagePullSecrets: {}

nodeSelector: {}
tolerations: []

livenessProbe:
  failureThreshold: 5
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 30

readinessProbe:
  failureThreshold: 5
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 30

initContainers: []

service:
  enabled: true
  type: ClusterIP

extra:
  []
  # - apiVersion: cert-manager.io/v1
  #   kind: Certificate
  #   metadata:
  #     name: supervisor.example.com-cert
  #   spec:
  #     secretName: supervisor.example.com-secret
  #     issuerRef:
  #       name: production-cluster-issuer
  #       kind: ClusterIssuer
  #     commonName: supervisor.example.com
  #     subject:
  #       countries: [CH]
  #       localities: [Zug]
  #       organizationalUnits: [IT]
  #       organizations: [DeepSquare Association]
  #       postalCodes: ['6300']
  #       provinces: [Zug]
  #       streetAddresses: [Gotthardstrasse 26]
  #     dnsNames:
  #       - supervisor.example.com

  # - apiVersion: traefik.containo.us/v1alpha1
  #   kind: IngressRoute
  #   metadata:
  #     name: supervisor-https
  #   spec:
  #     entryPoints:
  #       - websecure
  #     routes:
  #       - kind: Rule
  #         match: Host(`supervisor.example.com`) && Headers(`Content-Type`, `application/grpc`)
  #         services:
  #           - name: supervisor
  #             port: 80
  #             scheme: h2c
  #     tls:
  #       secretName: supervisor.example.com-secret
