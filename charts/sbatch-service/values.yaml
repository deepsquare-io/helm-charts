image:
  repository: ghcr.io/deepsquare-io/sbatch-service
  # tag defaults to AppVersion
  tag: ''

imagePullPolicy: 'IfNotPresent'

replicas: 1

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1

annotations: {}
labels: {}

config:
  debug: true

  metascheduler:
    smartContract: '0x68A606C58fA06fF6872c80d71A71Ab7506eCa44B'
    url: 'https://testnet.deepsquare.run/rpc'

  redis:
    # If is empty, will used the included redis and tls will be disabled
    address: ''
    tls:
      enable: false
      insecure: false
      ca: /etc/ssl/certs/ca-certificates.crt
      serverHostOverride: ''

  logger:
    # Endpoint format is: host:port
    endpoint: ''
    # Path of the writer on the compute nodes
    writer:
      path: '/usr/local/bin/grid-logger-writer'

  hook:
    pre:
      ## Accepts a path to a file in which will be embedded at the beginning of the job.
      path: ''
    post:
      ## Accepts a path to a file in which will be embedded at the ending of the job.
      path: ''

resources:
  {}
  # requests:
  #   cpu: '100m'
  #   memory: '256Mi'
  # limits:
  #   memory: '1Gi'

# Extra volume mounts
volumeMounts:
  []
  # - name: certs
  #   mountPath: /tls
  # - name: oracletls
  #   mountPath: /oracletls

# Extra volumes
volumes:
  []
  # - name: certs
  #   secret:
  #     secretName: cert-secret
  #     defaultMode: 384 # 0600
  # - name: oracletls
  #   secret:
  #     secretName: oracletls

## Use an alternate scheduler.
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ''

podSecurityContext:
  runAsUser: 1000

securityContext:
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# How long to wait to stop gracefully
terminationGracePeriod: 10

imagePullSecrets: {}

nodeSelector: {}
tolerations: []

livenessProbe:
  failureThreshold: 5
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 30

readinessProbe:
  failureThreshold: 5
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 30

initContainers: []

service:
  enabled: true
  type: ClusterIP

extra:
  []
  # - apiVersion: cert-manager.io/v1
  #   kind: Certificate
  #   metadata:
  #     name: supervisor.example.com-cert
  #   spec:
  #     secretName: supervisor.example.com-secret
  #     issuerRef:
  #       name: production-cluster-issuer
  #       kind: ClusterIssuer
  #     commonName: supervisor.example.com
  #     subject:
  #       countries: [CH]
  #       localities: [Zug]
  #       organizationalUnits: [IT]
  #       organizations: [DeepSquare Association]
  #       postalCodes: ['6300']
  #       provinces: [Zug]
  #       streetAddresses: [Gotthardstrasse 26]
  #     dnsNames:
  #       - supervisor.example.com

  # - apiVersion: traefik.containo.us/v1alpha1
  #   kind: IngressRoute
  #   metadata:
  #     name: supervisor-https
  #   spec:
  #     entryPoints:
  #       - websecure
  #     routes:
  #       - kind: Rule
  #         match: Host(`supervisor.example.com`) && Headers(`Content-Type`, `application/grpc`)
  #         services:
  #           - name: argocd-server
  #             port: 80
  #             scheme: h2c
  #     tls:
  #       secretName: supervisor.example.com-secret

# See: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
redis:
  enabled: true

  image:
    debug: true

  auth:
    enabled: false

  master:
    persistence:
      enabled: false

  replica:
    replicaCount: 0

  sentinel:
    enabled: false
